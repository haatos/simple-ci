package pages

import "fmt"
import "github.com/haatos/simple-ci/internal/views"
import "github.com/haatos/simple-ci/internal/store"
import "github.com/haatos/simple-ci/internal/views/components"

templ PipelinePage(user *store.User, pipeline *store.Pipeline, agents []*store.Agent) {
	@views.Layout(user, views.LayoutProps{Title: "App"}) {
		@PipelineMain(pipeline, agents)
	}
}

templ PipelineMain(pipeline *store.Pipeline, agents []*store.Agent) {
	<main class="w-full space-y-8 max-w-sm">
		<h2 class="text-xl font-bold">Update pipeline</h2>
		@PipelineUpdateForm(pipeline, agents)
	</main>
}

templ PipelineUpdateForm(pipeline *store.Pipeline, agents []*store.Agent) {
	<form
		id="update-pipeline-form"
		hx-patch="/app/pipelines"
		hx-swap="outerHTML"
	>
		@components.Select(components.SelectProps{
			Label:   "Agents",
			Name:    "pipeline_agent_id",
			Options: pipelineAgentIDSelectOptions(agents, pipeline.PipelineAgentID),
		})
		@components.Input(components.InputProps{
			Label:       "Name*",
			Name:        "name",
			Placeholder: "Enter a name...",
			Value:       pipeline.Name,
			Required:    true,
		})
		@components.Textarea(components.TextareaProps{
			Label:       "Description",
			Name:        "description",
			Value:       pipeline.Description,
			Placeholder: "Enter a description...",
			Rows:        3,
			Class:       "resize-none",
		})
		@components.Input(components.InputProps{
			Label:       "Repository*",
			Name:        "repository",
			Placeholder: "Enter a repository...",
			Value:       pipeline.Repository,
			Required:    true,
		})
		@components.Input(components.InputProps{
			Label:       "Script path*",
			Name:        "script_path",
			Placeholder: "Enter a pipeline script path...",
			Value:       pipeline.ScriptPath,
			Required:    true,
		})
		<input
			name="pipeline_id"
			type="number"
			class="hidden"
			{ templ.Attributes{"value": fmt.Sprintf("%d", pipeline.PipelineID)}... }
		/>
	</form>
	<div class="max-w-md flex justify-between items-center mt-6">
		@components.Modal(
			components.ModalProps{
				ID: "delete_agent_modal",
				Label: deletePipelineModalButton(
					templ.Attributes{"onclick": "delete_agent_modal.showModal()"},
				),
			}) {
			<h2 class="text-xl font-bold">Confirm pipeline deletion</h2>
			<p class="mt-8">Are you sure you want to delete this pipeline?</p>
			<div class="flex justify-between items-center mt-8">
				<form method="dialog">
					<button class="btn">Cancel</button>
				</form>
				<form hx-delete={ fmt.Sprintf("/app/pipelines/%d", pipeline.PipelineID) }>
					<button id="confirm-delete-button" type="submit" class="btn btn-error">Delete</button>
				</form>
			</div>
		}
		<button form="update-pipeline-form" type="submit" class="btn btn-primary">Update</button>
	</div>
}

templ deletePipelineModalButton(attrs templ.Attributes) {
	<div { attrs... } class="btn btn-ghost">
		@views.TrashIcon()
	</div>
}
