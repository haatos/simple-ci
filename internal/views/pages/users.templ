package pages

import "fmt"
import "github.com/haatos/simple-ci/internal/views"
import "github.com/haatos/simple-ci/internal/views/components"
import "github.com/haatos/simple-ci/internal/store"
import "github.com/haatos/simple-ci/internal/types"

templ UsersPage(user *store.User, users []*store.User) {
	@views.Layout(user, views.LayoutProps{Title: "App"}) {
		@UsersPageMain(users)
	}
}

templ UsersPageMain(users []*store.User) {
	<main class="w-full p-4 border border-base-content/20 rounded-box space-y-4">
		<div>
			@components.Modal(
				components.ModalProps{
					ID:    "add_user_modal",
					Label: addUserModalButton(templ.Attributes{"onclick": "add_user_modal.showModal()"}),
				}) {
				@addUserForm()
			}
		</div>
		<div class="overflow-x-auto">
			@usersTable(users)
		</div>
	</main>
}

templ addUserModalButton(attrs templ.Attributes) {
	<button { attrs... } class="btn btn-outline">
		Add user
	</button>
}

templ addUserForm() {
	<form
		id="add-user-form"
		hx-post="/app/users"
		hx-target="#users"
		hx-swap="beforeend"
	>
		@components.Select(components.SelectProps{
			Name:     "user_role_id",
			Label:    "User role",
			Options:  userRoleOptions(),
			Required: true,
		})
		@components.Input(
			components.InputProps{
				Label:       "Username*",
				Name:        "username",
				Placeholder: "Enter a username...",
				Required:    true,
			})
		@components.Input(
			components.InputProps{
				Label:       "Password*",
				Name:        "password",
				Type:        "password",
				Placeholder: "Enter a password...",
				Required:    true,
			},
		)
	</form>
	<div class="flex justify-between items-center mt-8">
		<form method="dialog">
			<button class="btn">Close</button>
		</form>
		<button form="add-user-form" type="submit" class="btn btn-primary">Add</button>
	</div>
	<script>
                    document.addEventListener("htmx:afterRequest", function(evt) {
                        if (evt.detail.elt.id === "add-user-form" && evt.detail.successful) {
                            add_user_modal.close()
                        }
                    })
                </script>
}

templ usersTable(users []*store.User) {
	<table class="table">
		<thead>
			<tr>
				<th>Username</th>
				<th>Role</th>
				<th></th>
			</tr>
		</thead>
		<tbody id="users">
			for _, u := range users {
				@UserRow(u)
			}
		</tbody>
	</table>
}

func userRoleOptions() []components.SelectOption {
	roles := types.ListNewUserRoles()
	options := make([]components.SelectOption, len(roles)+1)
	options[0] = components.SelectOption{
		Label:    "Select a role...",
		Value:    "0",
		Disabled: true,
		Selected: true,
	}
	for i := range roles {
		options[i+1] = components.SelectOption{
			Label: roles[i].ToString(),
			Value: fmt.Sprintf("%d", roles[i]),
		}
	}
	return options
}

func userRowRoleOptions(userRole types.Role) []components.SelectOption {
	roles := types.ListNewUserRoles()
	options := make([]components.SelectOption, len(roles))
	for i := range roles {
		options[i] = components.SelectOption{
			Label:    roles[i].ToString(),
			Value:    fmt.Sprintf("%d", roles[i]),
			Selected: roles[i] == userRole,
			Disabled: userRole == types.Superuser,
		}
	}
	if userRole == types.Superuser {
		options = append(options, components.SelectOption{
			Label:    userRole.ToString(),
			Value:    fmt.Sprintf("%d", userRole),
			Selected: true,
		})
	}
	return options
}

templ UserRow(u *store.User) {
	<tr>
		<td>{ u.Username }</td>
		<td>
			<form
				hx-patch={ fmt.Sprintf("/app/users/%d/role", u.UserID) }
				hx-trigger={ fmt.Sprintf("change from:#user_%d_role_select", u.UserID) }
				hx-swap="none"
			>
				@components.Select(components.SelectProps{
					ID:      fmt.Sprintf("user_%d_role_select", u.UserID),
					Name:    "role_id",
					Options: userRowRoleOptions(u.UserRoleID),
				})
			</form>
		</td>
		<td class="space-x-2">
			@editUserModal(u)
			@deleteUserModal(u)
		</td>
	</tr>
}

templ editUserModal(u *store.User) {
	@components.Modal(components.ModalProps{
		ID: fmt.Sprintf("edit_user_%d_modal_button", u.UserID),
		Label: userRowEditButton(
			templ.Attributes{
				"onclick": fmt.Sprintf("edit_user_%d_modal_button.showModal()", u.UserID),
			},
		),
	}) {
		<form
			id={ fmt.Sprintf("update-user-%d-password-form", u.UserID) }
			hx-patch={ fmt.Sprintf("/app/users/%d/reset-password", u.UserID) }
		>
			@components.Input(components.InputProps{
				Label:           "Username",
				Name:            "username",
				Value:           u.Username,
				DisabledMessage: "Username cannot be changed",
			})
			@components.Input(components.InputProps{
				Label:       "New password",
				Name:        "password",
				Type:        "password",
				Placeholder: "Enter a new password...",
			})
			<script data-id={ fmt.Sprintf("edit_user_%d_modal_close_button", u.UserID) }>
                        ((form, id) => {
                            document.addEventListener("htmx:afterRequest", (evt) => {
                                if (evt.detail.elt.id === form.id && evt.detail.successful) {
                                    document.getElementById(id).click();
                                }
                            })
                        })(document.currentScript.parentElement, document.currentScript.getAttribute("data-id"))
                    </script>
		</form>
		<div class="flex justify-between items-center">
			<form method="dialog">
				<button
					id={ fmt.Sprintf("edit_user_%d_modal_close_button", u.UserID) }
					class="btn"
				>
					Close
				</button>
			</form>
			<button
				type="submit"
				form={ fmt.Sprintf("update-user-%d-password-form", u.UserID) }
				class="btn btn-primary"
			>
				Update
			</button>
		</div>
	}
}

templ deleteUserModal(u *store.User) {
	@components.Modal(components.ModalProps{
		ID: fmt.Sprintf("delete_user_%d_modal", u.UserID),
		Label: deleteUserModalButton(templ.Attributes{
			"onclick": fmt.Sprintf("delete_user_%d_modal.showModal()", u.UserID),
		}),
	}) {
		<h2>Are you sure you want to delete user '<b>{ u.Username }</b>'?</h2>
		<form
			id={ fmt.Sprintf("delete-user-%d-form", u.UserID) }
			hx-delete={ fmt.Sprintf("/app/users/%d", u.UserID) }
		>
			<script>
                ((form) => {
                        document.addEventListener("htmx:afterRequest", (evt) => {
                            if (evt.detail.elt.id === form.id && evt.detail.successful) {
                                form.closest("tr").remove();
                            }
                        })
                    })(document.currentScript.parentElement)
                </script>
		</form>
		<div class="flex justify-between items-center mt-8">
			<form method="dialog">
				<button class="btn btn-ghost">Close</button>
			</form>
			<button
				type="submit"
				form={ fmt.Sprintf("delete-user-%d-form", u.UserID) }
				class="btn btn-error"
			>
				Delete
			</button>
		</div>
	}
}

templ userRowEditButton(attrs templ.Attributes) {
	<button class="btn btn-sm btn-ghost" { attrs... }>
		@views.EditIconSmall()
	</button>
}

templ deleteUserModalButton(attrs templ.Attributes) {
	<button class="btn btn-sm btn-ghost" { attrs... }>
		@views.TrashIcon()
	</button>
}
