/*! tailwindcss v4.1.13 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-black: #000;
    --spacing: 0.25rem;
    --container-xs: 20rem;
    --container-sm: 24rem;
    --container-md: 28rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --font-weight-bold: 700;
    --radius-md: 0.375rem;
    --animate-pulse: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .modal {
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset: calc(0.25rem * 0);
      margin: calc(0.25rem * 0);
      display: grid;
      height: 100%;
      max-height: none;
      width: 100%;
      max-width: none;
      align-items: center;
      justify-items: center;
      background-color: transparent;
      padding: calc(0.25rem * 0);
      color: inherit;
      transition: visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
      overflow: clip;
      overscroll-behavior: contain;
      z-index: 999;
      scrollbar-gutter: auto;
      &::backdrop {
        display: none;
      }
    }
    @layer daisyui.modifier {
      &.modal-open, &[open], &:target, .modal-toggle:checked + & {
        pointer-events: auto;
        visibility: visible;
        opacity: 100%;
        transition: visibility 0s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
        background-color: oklch(0% 0 0/ 0.4);
        .modal-box {
          translate: 0 0;
          scale: 1;
          opacity: 1;
        }
      }
      @starting-style {
        &.modal-open, &[open], &:target, .modal-toggle:checked + & {
          opacity: 0%;
        }
      }
    }
  }
  .drawer-side {
    :where(&) {
      @layer daisyui.component {
        overflow-x: hidden;
        overflow-y: hidden;
      }
    }
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset-inline-start: calc(0.25rem * 0);
      top: calc(0.25rem * 0);
      z-index: 10;
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      width: 100%;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-rows: repeat(1, minmax(0, 1fr));
      align-items: flex-start;
      justify-items: start;
      overscroll-behavior: contain;
      background-color: transparent;
      opacity: 0%;
      transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
      height: 100vh;
      height: 100dvh;
      > .drawer-overlay {
        position: sticky;
        top: calc(0.25rem * 0);
        cursor: pointer;
        place-self: stretch;
        background-color: oklch(0% 0 0 / 40%);
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > *:not(.drawer-overlay) {
        will-change: transform;
        transition: translate 0.3s ease-out, width 0.2s ease-out;
        translate: -100%;
        [dir="rtl"] & {
          translate: 100%;
        }
      }
    }
  }
  .drawer-toggle {
    @layer daisyui.component {
      position: fixed;
      height: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      appearance: none;
      opacity: 0%;
      &:checked {
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          overflow-y: auto;
          opacity: 100%;
          scrollbar-color: currentColor oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4));
          @supports (color: color-mix(in lab, red, red)) {
            scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4));
          }
          & > *:not(.drawer-overlay) {
            translate: 0%;
          }
        }
      }
      &:focus-visible ~ .drawer-content label.drawer-button {
        outline: 2px solid;
        outline-offset: 2px;
      }
    }
  }
  .tooltip {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      --tt-bg: var(--color-neutral);
      --tt-off: calc(100% + 0.5rem);
      --tt-tail: calc(100% + 1px + 0.25rem);
      & > .tooltip-content, &[data-tip]:before {
        position: absolute;
        max-width: 20rem;
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
        text-align: center;
        white-space: normal;
        color: var(--color-neutral-content);
        opacity: 0%;
        font-size: 0.875rem;
        line-height: 1.25;
        background-color: var(--tt-bg);
        width: max-content;
        pointer-events: none;
        z-index: 2;
        --tw-content: attr(data-tip);
        content: var(--tw-content);
      }
      @media (prefers-reduced-motion: no-preference) {
        & > .tooltip-content, &[data-tip]:before, &:after {
          transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
        }
      }
      &:after {
        opacity: 0%;
        background-color: var(--tt-bg);
        content: "";
        pointer-events: none;
        width: 0.625rem;
        height: 0.25rem;
        display: block;
        position: absolute;
        mask-repeat: no-repeat;
        mask-position: -1px 0;
        --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
        mask-image: var(--mask-tooltip);
      }
      &.tooltip-open, &[data-tip]:not([data-tip=""]):hover, &:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, &:has(:focus-visible) {
        > .tooltip-content, &[data-tip]:before, &:after {
          opacity: 100%;
          --tt-pos: 0rem;
        }
        @media (prefers-reduced-motion: no-preference) {
          & > .tooltip-content, &[data-tip]:before, &:after {
            transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms;
          }
        }
      }
    }
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-off) 50%;
      }
      &:after {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-tail) 50%;
      }
    }
  }
  .menu {
    @layer daisyui.component {
      display: flex;
      width: fit-content;
      flex-direction: column;
      flex-wrap: wrap;
      padding: calc(0.25rem * 2);
      --menu-active-fg: var(--color-neutral-content);
      --menu-active-bg: var(--color-neutral);
      font-size: 0.875rem;
      :where(li ul) {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        padding-inline-start: calc(0.25rem * 2);
        white-space: nowrap;
        &:before {
          position: absolute;
          inset-inline-start: calc(0.25rem * 0);
          top: calc(0.25rem * 3);
          bottom: calc(0.25rem * 3);
          background-color: var(--color-base-content);
          opacity: 10%;
          width: var(--border);
          content: "";
        }
      }
      :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
        display: none;
      }
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        display: grid;
        grid-auto-flow: column;
        align-content: flex-start;
        align-items: center;
        gap: calc(0.25rem * 2);
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        text-align: start;
        transition-property: color, background-color, box-shadow;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        grid-auto-columns: minmax(auto, max-content) auto max-content;
        text-wrap: balance;
        user-select: none;
      }
      :where(li > details > summary) {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        &::-webkit-details-marker {
          display: none;
        }
      }
      :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
        &:after {
          justify-self: flex-end;
          display: block;
          height: 0.375rem;
          width: 0.375rem;
          rotate: -135deg;
          translate: 0 -1px;
          transition-property: rotate, translate;
          transition-duration: 0.2s;
          content: "";
          transform-origin: 50% 50%;
          box-shadow: 2px 2px inset;
          pointer-events: none;
        }
      }
      :where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
        rotate: 45deg;
        translate: 0 1px;
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn) {
        &.menu-focus, &:focus-visible {
          cursor: pointer;
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          color: var(--color-base-content);
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        cursor: pointer;
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
      }
      :where(li:empty) {
        background-color: var(--color-base-content);
        opacity: 10%;
        margin: 0.5rem 1rem;
        height: 1px;
      }
      :where(li) {
        position: relative;
        display: flex;
        flex-shrink: 0;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: stretch;
        .badge {
          justify-self: flex-end;
        }
        & > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
          color: var(--menu-active-fg);
          background-color: var(--menu-active-bg);
          background-size: auto, calc(var(--noise) * 100%);
          background-image: none, var(--fx-noise);
          &:not(&:active) {
            box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
          }
        }
        &.menu-disabled {
          pointer-events: none;
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      .dropdown:focus-within {
        .menu-dropdown-toggle:after {
          rotate: 45deg;
          translate: 0 1px;
        }
      }
      .dropdown-content {
        margin-top: calc(0.25rem * 2);
        padding: calc(0.25rem * 2);
        &:before {
          display: none;
        }
      }
    }
  }
  .dropdown {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
      & > *:not(summary):focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      .dropdown-content {
        position: absolute;
      }
      &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content, &.dropdown-hover:not(:hover) [tabindex]:first-child:focus:not(:focus-visible) ~ .dropdown-content {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      &[popover], .dropdown-content {
        z-index: 999;
        @media (prefers-reduced-motion: no-preference) {
          animation: dropdown 0.2s;
          transition-property: opacity, scale, display;
          transition-behavior: allow-discrete;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      @starting-style {
        &[popover], .dropdown-content {
          scale: 95%;
          opacity: 0;
        }
      }
      &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
        > [tabindex]:first-child {
          pointer-events: none;
        }
        .dropdown-content {
          opacity: 100%;
        }
      }
      &.dropdown-hover:hover {
        .dropdown-content {
          opacity: 100%;
          scale: 100%;
        }
      }
      &:is(details) {
        summary {
          &::-webkit-details-marker {
            display: none;
          }
        }
      }
      &.dropdown-open, &:focus, &:focus-within {
        .dropdown-content {
          scale: 100%;
        }
      }
      &:where([popover]) {
        background: #0000;
      }
      &[popover] {
        position: fixed;
        color: inherit;
        @supports not (position-area: bottom) {
          margin: auto;
          &.dropdown-open:not(:popover-open) {
            display: none;
            transform-origin: top;
            opacity: 0%;
            scale: 95%;
          }
          &::backdrop {
            background-color: color-mix(in oklab, #000 30%, #0000);
          }
        }
        &:not(.dropdown-open, :popover-open) {
          display: none;
          transform-origin: top;
          opacity: 0%;
          scale: 95%;
        }
      }
    }
  }
  .btn {
    :where(&) {
      @layer daisyui.component {
        width: unset;
      }
    }
    .prose & {
      text-decoration-line: none;
    }
    @layer daisyui.component {
      display: inline-flex;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 1.5);
      text-align: center;
      vertical-align: middle;
      outline-offset: 2px;
      webkit-user-select: none;
      user-select: none;
      padding-inline: var(--btn-p);
      color: var(--btn-fg);
      --tw-prose-links: var(--btn-fg);
      height: var(--size);
      font-size: var(--fontsize, 0.875rem);
      font-weight: 600;
      outline-color: var(--btn-color, var(--color-base-content));
      transition-property: color, background-color, border-color, box-shadow;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      transition-duration: 0.2s;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-color: var(--btn-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--btn-noise);
      border-width: var(--border);
      border-style: solid;
      border-color: var(--btn-border);
      text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
      touch-action: manipulation;
      box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
      --size: calc(var(--size-field, 0.25rem) * 10);
      --btn-bg: var(--btn-color, var(--color-base-200));
      --btn-fg: var(--color-base-content);
      --btn-p: 1rem;
      --btn-border: var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
      }
      --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
      }
      --btn-noise: var(--fx-noise);
      @media (hover: hover) {
        &:hover {
          --btn-bg: var(--btn-color, var(--color-base-200));
          @supports (color: color-mix(in lab, red, red)) {
            --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
          }
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline-width: 2px;
        outline-style: solid;
        isolation: isolate;
      }
      &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
        }
        --btn-border: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      }
      &:is(input[type="checkbox"], input[type="radio"]) {
        appearance: none;
        &::after {
          --tw-content: attr(aria-label);
          content: var(--tw-content);
        }
      }
      &:where(input:checked:not(.filter .btn)) {
        --btn-color: var(--color-primary);
        --btn-fg: var(--color-primary-content);
        isolation: isolate;
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
    &[disabled] {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
  }
  .btn-disabled {
    @layer daisyui.modifier {
      &:not(.btn-link, .btn-ghost) {
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        box-shadow: none;
      }
      pointer-events: none;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
      @media (hover: hover) {
        &:hover {
          pointer-events: none;
          background-color: var(--color-neutral);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
          }
          --btn-border: #0000;
          --btn-fg: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
      }
    }
  }
  .validator-hint {
    @layer daisyui.component {
      visibility: hidden;
      margin-top: calc(0.25rem * 2);
      font-size: 0.75rem;
    }
  }
  .validator {
    @layer daisyui.component {
      &:user-valid, &:has(:user-valid) {
        &, &:focus, &:checked, &[aria-checked="true"], &:focus-within {
          --input-color: var(--color-success);
        }
      }
      &:user-invalid, &:has(:user-invalid), &[aria-invalid]:not([aria-invalid="false"]), &:has([aria-invalid]:not([aria-invalid="false"])) {
        &, &:focus, &:checked, &[aria-checked="true"], &:focus-within {
          --input-color: var(--color-error);
        }
        & ~ .validator-hint {
          visibility: visible;
          color: var(--color-error);
        }
      }
    }
    &:user-invalid, &:has(:user-invalid), &[aria-invalid]:not([aria-invalid="false"]), &:has([aria-invalid]:not([aria-invalid="false"])) {
      & ~ .validator-hint {
        display: revert-layer;
      }
    }
  }
  .toast {
    @layer daisyui.component {
      position: fixed;
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      top: auto;
      bottom: calc(0.25rem * 4);
      display: flex;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      background-color: transparent;
      translate: var(--toast-x, 0) var(--toast-y, 0);
      width: max-content;
      max-width: calc(100vw - 2rem);
      & > * {
        @media (prefers-reduced-motion: no-preference) {
          animation: toast 0.25s ease-out;
        }
      }
    }
  }
  .input {
    @layer daisyui.component {
      cursor: text;
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 2);
      background-color: var(--color-base-100);
      padding-inline: calc(0.25rem * 3);
      vertical-align: middle;
      white-space: nowrap;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      &:where(input) {
        display: inline-flex;
      }
      :where(input) {
        display: inline-flex;
        height: 100%;
        width: 100%;
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where(input[type="url"]), :where(input[type="email"]) {
        direction: ltr;
      }
      :where(input[type="date"]) {
        display: inline-flex;
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
      }
      &:has(> input[disabled]) > input[disabled] {
        cursor: not-allowed;
      }
      &::-webkit-date-and-time-value {
        text-align: inherit;
      }
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
      &::-webkit-calendar-picker-indicator {
        position: absolute;
        inset-inline-end: 0.75em;
      }
      &:has(> input[type="date"]) {
        :where(input[type="date"]) {
          display: inline-flex;
          webkit-appearance: none;
          appearance: none;
        }
        input[type="date"]::-webkit-calendar-picker-indicator {
          position: absolute;
          inset-inline-end: 0.75em;
          width: 1em;
          height: 1em;
          cursor: pointer;
        }
      }
    }
  }
  .table {
    @layer daisyui.component {
      font-size: 0.875rem;
      position: relative;
      width: 100%;
      border-radius: var(--radius-box);
      text-align: left;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        text-align: right;
      }
      tr.row-hover {
        &, &:nth-child(even) {
          &:hover {
            @media (hover: hover) {
              background-color: var(--color-base-200);
            }
          }
        }
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 3);
        vertical-align: middle;
      }
      :where(thead, tfoot) {
        white-space: nowrap;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
        }
        font-size: 0.875rem;
        font-weight: 600;
      }
      :where(tfoot) {
        border-top: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
        }
      }
      :where(.table-pin-rows thead tr) {
        position: sticky;
        top: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-rows tfoot tr) {
        position: sticky;
        bottom: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-cols tr th) {
        position: sticky;
        right: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        background-color: var(--color-base-100);
      }
      :where(thead tr, tbody tr:not(:last-child)) {
        border-bottom: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
        }
      }
    }
  }
  .range {
    @layer daisyui.component {
      appearance: none;
      webkit-appearance: none;
      --range-thumb: var(--color-base-100);
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
      --range-progress: currentColor;
      --range-fill: 1;
      --range-p: 0.25rem;
      --range-bg: currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        --range-bg: color-mix(in oklab, currentColor 10%, #0000);
      }
      cursor: pointer;
      overflow: hidden;
      background-color: transparent;
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
      border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
      border: none;
      height: var(--range-thumb-size);
      [dir="rtl"] & {
        --range-dir: -1;
      }
      &:focus {
        outline: none;
      }
      &:focus-visible {
        outline: 2px solid;
        outline-offset: 2px;
      }
      &::-webkit-slider-runnable-track {
        width: 100%;
        background-color: var(--range-bg);
        border-radius: var(--radius-selector);
        height: calc(var(--range-thumb-size) * 0.5);
      }
      @media (forced-colors: active) {
        &::-webkit-slider-runnable-track {
          border: 1px solid;
        }
      }
      @media (forced-colors: active) {
        &::-moz-range-track {
          border: 1px solid;
        }
      }
      &::-webkit-slider-thumb {
        position: relative;
        box-sizing: border-box;
        border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
        background-color: currentColor;
        height: var(--range-thumb-size);
        width: var(--range-thumb-size);
        border: var(--range-p) solid;
        appearance: none;
        webkit-appearance: none;
        top: 50%;
        color: var(--range-progress);
        transform: translateY(-50%);
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        }
      }
      &::-moz-range-track {
        width: 100%;
        background-color: var(--range-bg);
        border-radius: var(--radius-selector);
        height: calc(var(--range-thumb-size) * 0.5);
      }
      &::-moz-range-thumb {
        position: relative;
        box-sizing: border-box;
        border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
        background-color: currentColor;
        height: var(--range-thumb-size);
        width: var(--range-thumb-size);
        border: var(--range-p) solid;
        top: 50%;
        color: var(--range-progress);
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        }
      }
      &:disabled {
        cursor: not-allowed;
        opacity: 30%;
      }
    }
  }
  .select {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      background-color: var(--color-base-100);
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 7);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: 0.875rem;
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
      background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
      background-size: 4px 4px, 4px 4px;
      background-repeat: no-repeat;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      border-color: var(--input-color);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      [dir="rtl"] & {
        background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
        &::picker(select), select::picker(select) {
          translate: 0.5rem 0;
        }
      }
      &[multiple] {
        height: auto;
        overflow: auto;
        padding-block: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 3);
        background-image: none;
      }
      select {
        margin-inline-start: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -7);
        width: calc(100% + 2.75rem);
        appearance: none;
        padding-inline-start: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 7);
        height: calc(100% - calc(var(--border) * 2));
        align-items: center;
        background: inherit;
        border-radius: inherit;
        border-style: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * -5.5);
          background-image: none;
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      &:has(> select[disabled]) > select[disabled] {
        cursor: not-allowed;
      }
      &, & select {
        @supports (appearance: base-select) {
          appearance: base-select;
        }
        @supports (appearance: base-select) {
          &::picker(select) {
            appearance: base-select;
          }
        }
        &::picker(select) {
          color: inherit;
          max-height: min(24rem, 70dvh);
          margin-inline: 0.5rem;
          translate: -0.5rem 0;
          border: var(--border) solid var(--color-base-200);
          margin-block: calc(0.25rem * 2);
          border-radius: var(--radius-box);
          padding: calc(0.25rem * 2);
          background-color: inherit;
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
          box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
        }
        &::picker-icon {
          display: none;
        }
        optgroup {
          padding-top: 0.5em;
          option {
            &:nth-child(1) {
              margin-top: 0.5em;
            }
          }
        }
        option {
          border-radius: var(--radius-field);
          padding-inline: calc(0.25rem * 3);
          padding-block: calc(0.25rem * 1.5);
          transition-property: color, background-color;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
          white-space: normal;
          &:not(:disabled) {
            &:hover, &:focus-visible {
              cursor: pointer;
              background-color: var(--color-base-content);
              @supports (color: color-mix(in lab, red, red)) {
                background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
              }
              --tw-outline-style: none;
              outline-style: none;
              @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
              }
            }
            &:active {
              background-color: var(--color-neutral);
              color: var(--color-neutral-content);
              box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
            }
          }
        }
      }
    }
  }
  .checkbox {
    @layer daisyui.component {
      border: var(--border) solid var(--input-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
      }
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: var(--radius-selector);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      color: var(--color-base-content);
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
      transition: background-color 0.2s, box-shadow 0.2s;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      &:before {
        --tw-content: "";
        content: var(--tw-content);
        display: block;
        width: 100%;
        height: 100%;
        rotate: 45deg;
        background-color: currentcolor;
        opacity: 0%;
        transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
        transition-delay: 0.1s;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
        box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        font-size: 1rem;
        line-height: 0.75;
      }
      &:focus-visible {
        outline: 2px solid var(--input-color, currentColor);
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"] {
        background-color: var(--input-color, #0000);
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        &:before {
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
          opacity: 100%;
        }
        @media (forced-colors: active) {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
        @media print {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
      }
      &:indeterminate {
        background-color: var( --input-color, var(--color-base-content) );
        @supports (color: color-mix(in lab, red, red)) {
          background-color: var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) );
        }
        &:before {
          rotate: 0deg;
          opacity: 100%;
          translate: 0 -35%;
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .navbar {
    @layer daisyui.component {
      display: flex;
      width: 100%;
      align-items: center;
      padding: 0.5rem;
      min-height: 4rem;
    }
    :where(&) {
      @layer daisyui.modifier {
        position: relative;
      }
    }
  }
  .drawer {
    @layer daisyui.component {
      position: relative;
      display: grid;
      width: 100%;
      grid-auto-columns: max-content auto;
    }
  }
  .card {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--radius-box);
      outline-width: 2px;
      transition: outline 0.2s ease-in-out;
      outline: 0 solid #0000;
      outline-offset: 2px;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline-color: currentColor;
      }
      :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: unset;
      }
      :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
      }
      figure {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
        cursor: pointer;
        user-select: none;
      }
      &:has(> :checked) {
        outline: 2px solid currentColor;
      }
    }
  }
  .tooltip-top {
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-off) 50%;
      }
      &:after {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-tail) 50%;
      }
    }
  }
  .toast-center {
    @layer daisyui.modifier {
      inset-inline-start: calc(1/2 * 100%);
      inset-inline-end: calc(1/2 * 100%);
      --toast-x: -50%;
    }
  }
  .dropdown-end {
    @layer daisyui.modifier {
      --anchor-h: span-left;
      :where(.dropdown-content) {
        inset-inline-end: calc(0.25rem * 0);
        translate: 0 0;
        [dir="rtl"] & {
          translate: 0 0;
        }
      }
      &.dropdown-left {
        --anchor-h: left;
        --anchor-v: span-top;
        .dropdown-content {
          top: auto;
          bottom: calc(0.25rem * 0);
        }
      }
      &.dropdown-right {
        --anchor-h: right;
        --anchor-v: span-top;
        .dropdown-content {
          top: auto;
          bottom: calc(0.25rem * 0);
        }
      }
    }
  }
  .toast-top {
    @layer daisyui.modifier {
      top: calc(0.25rem * 4);
      bottom: auto;
      --toast-y: 0;
    }
  }
  .textarea {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      min-height: calc(0.25rem * 20);
      flex-shrink: 1;
      appearance: none;
      border-radius: var(--radius-field);
      background-color: var(--color-base-100);
      padding-block: calc(0.25rem * 2);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      padding-inline-start: 0.75rem;
      padding-inline-end: 0.75rem;
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      textarea {
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
      }
      &:has(> textarea[disabled]) > textarea[disabled] {
        cursor: not-allowed;
      }
    }
  }
  .z-\[9999\] {
    z-index: 9999;
  }
  .col-span-2 {
    grid-column: span 2 / span 2;
  }
  .col-span-6 {
    grid-column: span 6 / span 6;
  }
  .modal-box {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      max-height: 100vh;
      width: calc(11/12 * 100%);
      max-width: 32rem;
      background-color: var(--color-base-100);
      padding: calc(0.25rem * 6);
      transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
      border-top-left-radius: var(--modal-tl, var(--radius-box));
      border-top-right-radius: var(--modal-tr, var(--radius-box));
      border-bottom-left-radius: var(--modal-bl, var(--radius-box));
      border-bottom-right-radius: var(--modal-br, var(--radius-box));
      scale: 95%;
      opacity: 0;
      box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
      overflow-y: auto;
      overscroll-behavior: contain;
    }
  }
  .drawer-content {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row-start: 1;
      min-width: calc(0.25rem * 0);
    }
  }
  .m-1 {
    margin: calc(var(--spacing) * 1);
  }
  .mx-4 {
    margin-inline: calc(var(--spacing) * 4);
  }
  .input-lg {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 12);
      font-size: max(var(--font-size, 1.125rem), 1.125rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .input-sm {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 8);
      font-size: max(var(--font-size, 0.75rem), 0.75rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -2);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .input-xl {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 14);
      font-size: max(var(--font-size, 1.375rem), 1.375rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -4);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .input-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-field, 0.25rem) * 6);
      font-size: max(var(--font-size, 0.6875rem), 0.6875rem);
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -1);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
    }
  }
  .label {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      white-space: nowrap;
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 60%, transparent);
      }
      &:has(input) {
        cursor: pointer;
      }
      &:is(.input > *, .select > *) {
        display: flex;
        height: calc(100% - 0.5rem);
        align-items: center;
        padding-inline: calc(0.25rem * 3);
        white-space: nowrap;
        font-size: inherit;
        &:first-child {
          margin-inline-start: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * 3);
          border-inline-end: var(--border) solid currentColor;
          @supports (color: color-mix(in lab, red, red)) {
            border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
          }
        }
        &:last-child {
          margin-inline-start: calc(0.25rem * 3);
          margin-inline-end: calc(0.25rem * -3);
          border-inline-start: var(--border) solid currentColor;
          @supports (color: color-mix(in lab, red, red)) {
            border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
          }
        }
      }
    }
  }
  .join-item {
    &:where(*:not(:first-child, :disabled, [disabled], .btn-disabled)) {
      margin-inline-start: calc(var(--border, 1px) * -1);
      margin-block-start: 0;
    }
    &:where(*:is(:disabled, [disabled], .btn-disabled)) {
      border-width: var(--border, 1px) 0 var(--border, 1px) var(--border, 1px);
    }
  }
  .modal-action {
    @layer daisyui.component {
      margin-top: calc(0.25rem * 6);
      display: flex;
      justify-content: flex-end;
      gap: calc(0.25rem * 2);
    }
  }
  .\!mt-0 {
    margin-top: calc(var(--spacing) * 0) !important;
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mt-24 {
    margin-top: calc(var(--spacing) * 24);
  }
  .mt-32 {
    margin-top: calc(var(--spacing) * 32);
  }
  .mt-48 {
    margin-top: calc(var(--spacing) * 48);
  }
  .mr-2 {
    margin-right: calc(var(--spacing) * 2);
  }
  .fieldset-legend {
    @layer daisyui.component {
      margin-bottom: calc(0.25rem * -1);
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: calc(0.25rem * 2);
      padding-block: calc(0.25rem * 2);
      color: var(--color-base-content);
      font-weight: 600;
    }
  }
  .ml-2 {
    margin-left: calc(var(--spacing) * 2);
  }
  .status {
    @layer daisyui.component {
      display: inline-block;
      aspect-ratio: 1 / 1;
      width: calc(0.25rem * 2);
      height: calc(0.25rem * 2);
      border-radius: var(--radius-selector);
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
      background-position: center;
      background-repeat: no-repeat;
      vertical-align: middle;
      color: color-mix(in srgb, #000 30%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
      background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
      box-shadow: 0 2px 3px -1px currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
      }
    }
  }
  .navbar-end {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      width: 50%;
      justify-content: flex-end;
    }
  }
  .navbar-start {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      width: 50%;
      justify-content: flex-start;
    }
  }
  .card-body {
    @layer daisyui.component {
      display: flex;
      flex: auto;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      padding: var(--card-p, 1.5rem);
      font-size: var(--card-fs, 0.875rem);
      :where(p) {
        flex-grow: 1;
      }
    }
  }
  .alert {
    border-width: var(--border);
    border-color: var(--alert-border-color, var(--color-base-200));
    @layer daisyui.component {
      border-style: solid;
      --alert-border-color: var(--color-base-200);
      display: grid;
      align-items: center;
      gap: calc(0.25rem * 4);
      border-radius: var(--radius-box);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 3);
      color: var(--color-base-content);
      background-color: var(--alert-color, var(--color-base-200));
      justify-content: start;
      justify-items: start;
      grid-auto-flow: column;
      grid-template-columns: auto;
      text-align: start;
      font-size: 0.875rem;
      line-height: 1.25rem;
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
      }
      &:has(:nth-child(2)) {
        grid-template-columns: auto minmax(auto, 1fr);
      }
    }
  }
  .fieldset {
    @layer daisyui.component {
      display: grid;
      gap: calc(0.25rem * 1.5);
      padding-block: calc(0.25rem * 1);
      font-size: 0.75rem;
      grid-template-columns: 1fr;
      grid-auto-rows: max-content;
    }
  }
  .card-actions {
    @layer daisyui.component {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      gap: calc(0.25rem * 2);
    }
  }
  .card-title {
    @layer daisyui.component {
      display: flex;
      align-items: center;
      gap: calc(0.25rem * 2);
      font-size: var(--cardtitle-fs, 1.125rem);
      font-weight: 600;
    }
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    :where(.join-item) {
      border-start-start-radius: var(--join-ss, 0);
      border-start-end-radius: var(--join-se, 0);
      border-end-start-radius: var(--join-es, 0);
      border-end-end-radius: var(--join-ee, 0);
      * {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:first-child) {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }
    > .join-item:where(:last-child) {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      :where(.join-item) {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:only-child) {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline-block {
    display: inline-block;
  }
  .table {
    display: table;
  }
  .modal-bottom {
    @layer daisyui.modifier {
      place-items: end;
      .modal-box {
        height: auto;
        width: 100%;
        max-width: none;
        max-height: calc(100vh - 5em);
        translate: 0 100%;
        scale: 1;
        --modal-tl: var(--radius-box);
        --modal-tr: var(--radius-box);
        --modal-bl: 0;
        --modal-br: 0;
      }
    }
  }
  .btn-square {
    @layer daisyui.modifier {
      padding-inline: calc(0.25rem * 0);
      width: var(--size);
      height: var(--size);
    }
  }
  .h-3 {
    height: calc(var(--spacing) * 3);
  }
  .h-4 {
    height: calc(var(--spacing) * 4);
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-6 {
    height: calc(var(--spacing) * 6);
  }
  .h-10 {
    height: calc(var(--spacing) * 10);
  }
  .h-full {
    height: 100%;
  }
  .max-h-80 {
    max-height: calc(var(--spacing) * 80);
  }
  .min-h-72 {
    min-height: calc(var(--spacing) * 72);
  }
  .w-3 {
    width: calc(var(--spacing) * 3);
  }
  .w-4 {
    width: calc(var(--spacing) * 4);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-6 {
    width: calc(var(--spacing) * 6);
  }
  .w-10 {
    width: calc(var(--spacing) * 10);
  }
  .w-52 {
    width: calc(var(--spacing) * 52);
  }
  .w-full {
    width: 100%;
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .max-w-sm {
    max-width: var(--container-sm);
  }
  .max-w-xs {
    max-width: var(--container-xs);
  }
  .flex-none {
    flex: none;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .animate-pulse {
    animation: var(--animate-pulse);
  }
  .resize-none {
    resize: none;
  }
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  .grid-cols-7 {
    grid-template-columns: repeat(7, minmax(0, 1fr));
  }
  .grid-cols-8 {
    grid-template-columns: repeat(8, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .items-center {
    align-items: center;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .space-y-1 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-2 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-8 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-x-2 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .space-x-4 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 4) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .menu-lg {
    @layer daisyui.modifier {
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 1.5);
        font-size: 1.125rem;
      }
      .menu-title {
        padding-inline: calc(0.25rem * 6);
        padding-block: calc(0.25rem * 3);
      }
    }
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-none {
    --tw-border-style: none;
    border-style: none;
  }
  .border-base-content\/20 {
    border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .bg-base-300 {
    background-color: var(--color-base-300);
  }
  .bg-cover {
    background-size: cover;
  }
  .bg-center {
    background-position: center;
  }
  .bg-no-repeat {
    background-repeat: no-repeat;
  }
  .fill-base-content {
    fill: var(--color-base-content);
  }
  .fill-base-content\/50 {
    fill: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      fill: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .stroke-base-content {
    stroke: var(--color-base-content);
  }
  .stroke-base-content\/70 {
    stroke: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      stroke: color-mix(in oklab, var(--color-base-content) 70%, transparent);
    }
  }
  .stroke-current {
    stroke: currentcolor;
  }
  .stroke-error {
    stroke: var(--color-error);
  }
  .stroke-error-content {
    stroke: var(--color-error-content);
  }
  .stroke-info-content {
    stroke: var(--color-info-content);
  }
  .stroke-success-content {
    stroke: var(--color-success-content);
  }
  .stroke-warning-content {
    stroke: var(--color-warning-content);
  }
  .stroke-2 {
    stroke-width: 2;
  }
  .\!p-0 {
    padding: calc(var(--spacing) * 0) !important;
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }
  .pr-4 {
    padding-right: calc(var(--spacing) * 4);
  }
  .pb-2 {
    padding-bottom: calc(var(--spacing) * 2);
  }
  .text-end {
    text-align: end;
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .textarea-lg {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 1.125rem), 1.125rem);
    }
  }
  .textarea-sm {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 0.75rem), 0.75rem);
    }
  }
  .textarea-xl {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 1.375rem), 1.375rem);
    }
  }
  .textarea-xs {
    @layer daisyui.modifier {
      font-size: max(var(--font-size, 0.6875rem), 0.6875rem);
    }
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .alert-error {
    @layer daisyui.modifier {
      color: var(--color-error-content);
      --alert-border-color: var(--color-error);
      --alert-color: var(--color-error);
    }
  }
  .alert-info {
    @layer daisyui.modifier {
      color: var(--color-info-content);
      --alert-border-color: var(--color-info);
      --alert-color: var(--color-info);
    }
  }
  .alert-success {
    @layer daisyui.modifier {
      color: var(--color-success-content);
      --alert-border-color: var(--color-success);
      --alert-color: var(--color-success);
    }
  }
  .alert-warning {
    @layer daisyui.modifier {
      color: var(--color-warning-content);
      --alert-border-color: var(--color-warning);
      --alert-color: var(--color-warning);
    }
  }
  .text-error {
    color: var(--color-error);
  }
  .text-info {
    color: var(--color-info);
  }
  .text-neutral {
    color: var(--color-neutral);
  }
  .text-success {
    color: var(--color-success);
  }
  .btn-ghost {
    @layer daisyui.modifier {
      &:not(.btn-active, :hover, :active:focus, :focus-visible) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-border: #0000;
        --btn-noise: none;
        &:not(:disabled, [disabled], .btn-disabled) {
          outline-color: currentcolor;
          --btn-fg: currentColor;
        }
      }
      @media (hover: none) {
        &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
          --btn-shadow: "";
          --btn-bg: #0000;
          --btn-border: #0000;
          --btn-noise: none;
          --btn-fg: currentColor;
        }
      }
    }
  }
  .btn-outline {
    @layer daisyui.modifier {
      &:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-fg: var(--btn-color);
        --btn-border: var(--btn-color);
        --btn-noise: none;
      }
      @media (hover: none) {
        &:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
          --btn-shadow: "";
          --btn-bg: #0000;
          --btn-fg: var(--btn-color);
          --btn-border: var(--btn-color);
          --btn-noise: none;
        }
      }
    }
  }
  .btn-sm {
    @layer daisyui.modifier {
      --fontsize: 0.75rem;
      --btn-p: 0.75rem;
      --size: calc(var(--size-field, 0.25rem) * 8);
    }
  }
  .btn-xs {
    @layer daisyui.modifier {
      --fontsize: 0.6875rem;
      --btn-p: 0.5rem;
      --size: calc(var(--size-field, 0.25rem) * 6);
    }
  }
  .btn-error {
    @layer daisyui.modifier.color {
      --btn-color: var(--color-error);
      --btn-fg: var(--color-error-content);
    }
  }
  .btn-neutral {
    @layer daisyui.modifier.color {
      --btn-color: var(--color-neutral);
      --btn-fg: var(--color-neutral-content);
    }
  }
  .btn-primary {
    @layer daisyui.modifier.color {
      --btn-color: var(--color-primary);
      --btn-fg: var(--color-primary-content);
    }
  }
  .textarea-error {
    @layer daisyui.modifier {
      &, &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .focus\:appearance-none {
    &:focus {
      appearance: none;
    }
  }
  .focus\:outline-none {
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
  }
  .disabled\:opacity-40 {
    &:disabled {
      opacity: 40%;
    }
  }
  .sm\:modal-middle {
    @media (width >= 40rem) {
      @layer daisyui.modifier {
        place-items: center;
        .modal-box {
          height: auto;
          width: calc(11/12 * 100%);
          max-width: 32rem;
          max-height: calc(100vh - 5em);
          translate: 0 2%;
          scale: 98%;
          --modal-tl: var(--radius-box);
          --modal-tr: var(--radius-box);
          --modal-bl: var(--radius-box);
          --modal-br: var(--radius-box);
        }
      }
    }
  }
  .lg\:hidden {
    @media (width >= 64rem) {
      display: none;
    }
  }
  .xl\:grid-cols-2 {
    @media (width >= 80rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=nord]:checked),[data-theme=nord] {
    color-scheme: light;
    --color-base-100: oklch(95.127% 0.007 260.731);
    --color-base-200: oklch(93.299% 0.01 261.788);
    --color-base-300: oklch(89.925% 0.016 262.749);
    --color-base-content: oklch(32.437% 0.022 264.182);
    --color-primary: oklch(59.435% 0.077 254.027);
    --color-primary-content: oklch(11.887% 0.015 254.027);
    --color-secondary: oklch(69.651% 0.059 248.687);
    --color-secondary-content: oklch(13.93% 0.011 248.687);
    --color-accent: oklch(77.464% 0.062 217.469);
    --color-accent-content: oklch(15.492% 0.012 217.469);
    --color-neutral: oklch(45.229% 0.035 264.131);
    --color-neutral-content: oklch(89.925% 0.016 262.749);
    --color-info: oklch(69.207% 0.062 332.664);
    --color-info-content: oklch(13.841% 0.012 332.664);
    --color-success: oklch(76.827% 0.074 131.063);
    --color-success-content: oklch(15.365% 0.014 131.063);
    --color-warning: oklch(85.486% 0.089 84.093);
    --color-warning-content: oklch(17.097% 0.017 84.093);
    --color-error: oklch(60.61% 0.12 15.341);
    --color-error-content: oklch(12.122% 0.024 15.341);
    --radius-selector: 1rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.sm\:drawer-open > .drawer-toggle:checked) {
    @media (width < 40rem) {
      overflow: hidden;
    }
    @media (width < 40rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.md\:drawer-open > .drawer-toggle:checked) {
    @media (width < 48rem) {
      overflow: hidden;
    }
    @media (width < 48rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.lg\:drawer-open > .drawer-toggle:checked) {
    @media (width < 64rem) {
      overflow: hidden;
    }
    @media (width < 64rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.xl\:drawer-open > .drawer-toggle:checked) {
    @media (width < 80rem) {
      overflow: hidden;
    }
    @media (width < 80rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.\32xl\:drawer-open > .drawer-toggle:checked) {
    @media (width < 96rem) {
      overflow: hidden;
    }
    @media (width < 96rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-sm\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 40rem) {
      overflow: hidden;
    }
    @media (width >= 40rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-md\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 48rem) {
      overflow: hidden;
    }
    @media (width >= 48rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-lg\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 64rem) {
      overflow: hidden;
    }
    @media (width >= 64rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-xl\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 80rem) {
      overflow: hidden;
    }
    @media (width >= 80rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-2xl\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 96rem) {
      overflow: hidden;
    }
    @media (width >= 96rem) {
      --page-has-backdrop: 1;
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
  :where(:root, [data-theme]) {
    --root-bg: var(--color-base-100);
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@keyframes pulse {
  50% {
    opacity: 0.5;
  }
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-border-style: solid;
      --tw-font-weight: initial;
    }
  }
}
